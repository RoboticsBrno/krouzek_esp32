// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":9851,"type":"Slider","state":{"id":"sliderR","x":1,"y":2,"w":10,"h":1,"tab":0,"css":{},"color":"#e01b24","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":15306,"type":"Slider","state":{"id":"sliderG","x":1,"y":4,"w":10,"h":1,"tab":0,"css":{},"color":"#008000","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":38469,"type":"Slider","state":{"id":"sliderB","x":1,"y":6,"w":10,"h":1,"tab":0,"css":{},"color":"#1c71d8","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        sliderR(
            UI.slider(1, 2, 10, 1, 9851)
                .color("#e01b24")
                .max(255)
        ),
        sliderG(
            UI.slider(1, 4, 10, 1, 15306)
                .max(255)
        ),
        sliderB(
            UI.slider(1, 6, 10, 1, 38469)
                .color("#1c71d8")
                .max(255)
        )
    {
    }

public:
    void commit();

    Slider& sliderR;
    Slider& sliderG;
    Slider& sliderB;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    void changeTab (uint16_t index) {
        UI.changeTab(index);
    }

    Slider sliderR;
    Slider sliderG;
    Slider sliderB;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.sliderR = sliderR.finish();
    Layout.sliderG = sliderG.finish();
    Layout.sliderB = sliderB.finish();
    UI.commit();
}

};

};
