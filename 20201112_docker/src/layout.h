// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":25820,"type":"Joystick","state":{"id":"Joystick1","x":4.5,"y":10.5,"w":6,"h":6,"css":{},"color":"blue","keys":"wasd ","text":""}},{"uuid":50252,"type":"Led","state":{"id":"red","x":3,"y":3,"w":1.5,"h":1.5,"css":{},"color":"#FF0000","on":false}},{"uuid":11569,"type":"Led","state":{"id":"blue","x":7,"y":3,"w":1.5,"h":1.5,"css":{},"color":"#0002ff","on":false}},{"uuid":63681,"type":"Button","state":{"id":"redToggle","x":3,"y":5,"w":1.5,"h":1.5,"css":{},"text":"I/O"}},{"uuid":30902,"type":"Button","state":{"id":"blueToggle","x":7,"y":5,"w":1.5,"h":1.5,"css":{},"text":"I/O"}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Joystick1(
            UI.joystick(4.5, 10.5, 6, 6, 25820)
                .color("blue")
                .keys("wasd ")
        ),
        red(
            UI.led(3, 3, 1.5, 1.5, 50252)
        ),
        blue(
            UI.led(7, 3, 1.5, 1.5, 11569)
                .color("#0002ff")
        ),
        redToggle(
            UI.button(3, 5, 1.5, 1.5, 63681)
                .text("I/O")
        ),
        blueToggle(
            UI.button(7, 5, 1.5, 1.5, 30902)
                .text("I/O")
        )
    {
    }

public:
    void commit();

    Joystick& Joystick1;
    Led& red;
    Led& blue;
    Button& redToggle;
    Button& blueToggle;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}
   
    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Joystick Joystick1;
    Led red;
    Led blue;
    Button redToggle;
    Button blueToggle;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Joystick1 = Joystick1.finish();
    Layout.red = red.finish();
    Layout.blue = blue.finish();
    Layout.redToggle = redToggle.finish();
    Layout.blueToggle = blueToggle.finish();
    UI.commit();
}

};

};
