// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by http://localhost:3000/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":55497,"type":"Led","state":{"id":"ledRed","x":1,"y":1,"w":1,"h":1,"css":{},"color":"#FF0000","on":true}},{"uuid":35310,"type":"Checkbox","state":{"id":"boxBlack","x":4.5,"y":2.5,"w":4,"h":1,"css":{},"fontSize":14,"checked":true,"color":"#000000","text":"ChkBox"}},{"uuid":21890,"type":"Led","state":{"id":"ledBlue","x":3,"y":1,"w":1,"h":1,"css":{},"color":"#0010ff","on":false}},{"uuid":59221,"type":"Checkbox","state":{"id":"boxGreen","x":8,"y":1,"w":4,"h":1,"css":{},"fontSize":17.5,"checked":false,"color":"#00d805","text":"TestBox"}},{"uuid":6032,"type":"Joystick","state":{"id":"Joystick1","x":5,"y":11.5,"w":5.5,"h":5,"css":{},"color":"#FF0000","keys":"wasd ","text":"Fire!"}},{"uuid":59246,"type":"Button","state":{"id":"Button1","x":4.5,"y":5,"w":3,"h":1,"css":{},"text":"Button","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}},{"uuid":46846,"type":"Button","state":{"id":"Button2","x":0,"y":11.5,"w":3,"h":1,"css":{"border":"3px solid black","text-transform":"uppercase"},"text":"BUTTON","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}},{"uuid":12416,"type":"SpinEdit","state":{"id":"SpinEdit1","x":0.5,"y":7,"w":8.5,"h":2,"css":{},"fontSize":16,"color":"#ff0000","value":5,"step":0.25,"precision":0.11}},{"uuid":10567,"type":"SpinEdit","state":{"id":"SpinEdit2","x":0.5,"y":4,"w":4,"h":1,"css":{},"fontSize":14,"color":"#000000","value":0,"step":1,"precision":1}},{"uuid":30238,"type":"Bar","state":{"id":"Bar1","x":9.5,"y":6,"w":1,"h":3,"css":{},"color":"#008000","fontSize":16,"min":0,"max":100,"value":0,"showValue":false}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        ledRed(
            UI.led(1, 1, 1, 1, 55497)
                .on(true)
        ),
        boxBlack(
            UI.checkbox(4.5, 2.5, 4, 1, 35310)
                .checked(true)
                .text("ChkBox")
        ),
        ledBlue(
            UI.led(3, 1, 1, 1, 21890)
                .color("#0010ff")
        ),
        boxGreen(
            UI.checkbox(8, 1, 4, 1, 59221)
                .fontSize(17.5)
                .color("#00d805")
                .text("TestBox")
        ),
        Joystick1(
            UI.joystick(5, 11.5, 5.5, 5, 6032)
                .keys("wasd ")
                .text("Fire!")
        ),
        Button1(
            UI.button(4.5, 5, 3, 1, 59246)
        ),
        Button2(
            UI.button(0, 11.5, 3, 1, 46846)
                .css("border", "3px solid black")
                .css("text-transform", "uppercase")
                .text("BUTTON")
        ),
        SpinEdit1(
            UI.spinedit(0.5, 7, 8.5, 2, 12416)
                .fontSize(16)
                .color("#ff0000")
                .value(5)
                .step(0.25)
                .precision(0.11)
        ),
        SpinEdit2(
            UI.spinedit(0.5, 4, 4, 1, 10567)
        ),
        Bar1(
            UI.bar(9.5, 6, 1, 3, 30238)
        )
    {
    }

public:
    void commit();

    Led& ledRed;
    Checkbox& boxBlack;
    Led& ledBlue;
    Checkbox& boxGreen;
    Joystick& Joystick1;
    Button& Button1;
    Button& Button2;
    SpinEdit& SpinEdit1;
    SpinEdit& SpinEdit2;
    Bar& Bar1;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Led ledRed;
    Checkbox boxBlack;
    Led ledBlue;
    Checkbox boxGreen;
    Joystick Joystick1;
    Button Button1;
    Button Button2;
    SpinEdit SpinEdit1;
    SpinEdit SpinEdit2;
    Bar Bar1;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.ledRed = ledRed.finish();
    Layout.boxBlack = boxBlack.finish();
    Layout.ledBlue = ledBlue.finish();
    Layout.boxGreen = boxGreen.finish();
    Layout.Joystick1 = Joystick1.finish();
    Layout.Button1 = Button1.finish();
    Layout.Button2 = Button2.finish();
    Layout.SpinEdit1 = SpinEdit1.finish();
    Layout.SpinEdit2 = SpinEdit2.finish();
    Layout.Bar1 = Bar1.finish();
    UI.commit();
}

};

};
