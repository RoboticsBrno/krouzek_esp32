// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by http://localhost:3000/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":52524,"type":"Text","state":{"id":"labelAbzMux","x":0,"y":4.5,"w":6,"h":1,"css":{},"text":"","fontSize":11,"color":"#000000","background":"","align":"flex-end","valign":"center","prefix":"ABZ Output Type (ABZ_MUX):","suffix":""}},{"uuid":39822,"type":"Text","state":{"id":"labelAbzRes","x":0,"y":6,"w":6,"h":1,"css":{},"text":"","fontSize":12,"color":"#000000","background":"","align":"flex-end","valign":"center","prefix":"ABZ resolution: ","suffix":""}},{"uuid":54023,"type":"Input","state":{"id":"abzResolution","x":6.5,"y":6,"w":4.5,"h":1,"css":{},"text":"0","color":"","type":"number"}},{"uuid":9370,"type":"Checkbox","state":{"id":"outputAbz","x":6.5,"y":4.5,"w":2,"h":0.5,"css":{},"fontSize":14,"checked":false,"color":"#1c71d8","text":"ABZ"}},{"uuid":52680,"type":"Checkbox","state":{"id":"outputUvw","x":9,"y":4.5,"w":2,"h":0.5,"css":{},"fontSize":14,"checked":false,"color":"#2ec27e","text":"UVW"}},{"uuid":34243,"type":"Button","state":{"id":"btnReset","x":0,"y":14,"w":4,"h":2,"css":{},"text":"Discard","fontSize":22,"color":"#000000","background":"","align":"center","valign":"center"}},{"uuid":58793,"type":"Button","state":{"id":"btnSave","x":4,"y":14,"w":8,"h":2,"css":{},"text":"Apply","fontSize":22,"color":"#000000","background":"#33d17a","align":"center","valign":"center"}},{"uuid":30181,"type":"Circle","state":{"id":"angle","x":4,"y":0,"w":4,"h":3.5,"css":{},"color":"#1a5fb4","fontSize":16,"min":0,"max":360,"lineWidth":25,"valueStart":0,"value":180,"showValue":true}},{"uuid":17273,"type":"Button","state":{"id":"btnWriteEeprom","x":0,"y":16,"w":12,"h":2,"css":{},"text":"Write to EEPROM","fontSize":22,"color":"#ffffff","background":"#a51d2d","align":"center","valign":"center"}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        labelAbzMux(
            UI.text(0, 4.5, 6, 1, 52524)
                .text("")
                .fontSize(11)
                .align("flex-end")
                .prefix("ABZ Output Type (ABZ_MUX):")
        ),
        labelAbzRes(
            UI.text(0, 6, 6, 1, 39822)
                .text("")
                .align("flex-end")
                .prefix("ABZ resolution: ")
        ),
        abzResolution(
            UI.input(6.5, 6, 4.5, 1, 54023)
                .text("0")
                .color("")
                .type("number")
        ),
        outputAbz(
            UI.checkbox(6.5, 4.5, 2, 0.5, 9370)
                .color("#1c71d8")
                .text("ABZ")
        ),
        outputUvw(
            UI.checkbox(9, 4.5, 2, 0.5, 52680)
                .color("#2ec27e")
                .text("UVW")
        ),
        btnReset(
            UI.button(0, 14, 4, 2, 34243)
                .text("Discard")
                .fontSize(22)
        ),
        btnSave(
            UI.button(4, 14, 8, 2, 58793)
                .text("Apply")
                .fontSize(22)
                .background("#33d17a")
        ),
        angle(
            UI.circle(4, 0, 4, 3.5, 30181)
                .color("#1a5fb4")
                .lineWidth(25)
                .value(180)
        ),
        btnWriteEeprom(
            UI.button(0, 16, 12, 2, 17273)
                .text("Write to EEPROM")
                .fontSize(22)
                .color("#ffffff")
                .background("#a51d2d")
        )
    {
    }

public:
    void commit();

    Text& labelAbzMux;
    Text& labelAbzRes;
    Input& abzResolution;
    Checkbox& outputAbz;
    Checkbox& outputUvw;
    Button& btnReset;
    Button& btnSave;
    Circle& angle;
    Button& btnWriteEeprom;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Text labelAbzMux;
    Text labelAbzRes;
    Input abzResolution;
    Checkbox outputAbz;
    Checkbox outputUvw;
    Button btnReset;
    Button btnSave;
    Circle angle;
    Button btnWriteEeprom;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.labelAbzMux = labelAbzMux.finish();
    Layout.labelAbzRes = labelAbzRes.finish();
    Layout.abzResolution = abzResolution.finish();
    Layout.outputAbz = outputAbz.finish();
    Layout.outputUvw = outputUvw.finish();
    Layout.btnReset = btnReset.finish();
    Layout.btnSave = btnSave.finish();
    Layout.angle = angle.finish();
    Layout.btnWriteEeprom = btnWriteEeprom.finish();
    UI.commit();
}

};

};
