// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":38765,"type":"Camera","state":{"id":"Camera1","x":0,"y":1,"w":12,"h":11,"tab":0,"css":{},"rotation":90,"clip":false}},{"uuid":25922,"type":"Text","state":{"id":"tagsCnt","x":0,"y":0,"w":1.5,"h":1,"tab":0,"css":{},"text":"0","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":2308,"type":"Text","state":{"id":"tagCoords","x":1.5,"y":0,"w":4,"h":1,"tab":0,"css":{},"text":"","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":50192,"type":"Text","state":{"id":"tagId","x":0,"y":12,"w":12,"h":4,"tab":0,"css":{},"text":"","fontSize":40,"color":"#c01c28","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":8309,"type":"Bar","state":{"id":"ramCurrent","x":5.5,"y":0,"w":6.5,"h":0.5,"tab":0,"css":{},"color":"#008000","fontSize":18,"min":0,"max":160,"value":0,"showValue":true}},{"uuid":45513,"type":"Bar","state":{"id":"ramMin","x":5.5,"y":0.5,"w":6.5,"h":0.5,"tab":0,"css":{},"color":"#ffbe6f","fontSize":18,"min":0,"max":160,"value":0,"showValue":true}},{"uuid":32117,"type":"Checkbox","state":{"id":"enableAprilTag","x":0,"y":17,"w":4,"h":1,"tab":0,"css":{},"fontSize":14,"checked":false,"color":"#33d17a","text":"AprilTag detection"}},{"uuid":5527,"type":"Checkbox","state":{"id":"enableFrameSync","x":8,"y":17,"w":4,"h":1,"tab":0,"css":{},"fontSize":14,"checked":false,"color":"#e66100","text":"Sync camera to AprilTags"}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x041000,
    "Your RBGridUi library version is too low for this layout, please update to 041000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Camera1(
            UI.camera(0, 1, 12, 11, 38765)
        ),
        tagsCnt(
            UI.text(0, 0, 1.5, 1, 25922)
                .text("0")
        ),
        tagCoords(
            UI.text(1.5, 0, 4, 1, 2308)
                .text("")
        ),
        tagId(
            UI.text(0, 12, 12, 4, 50192)
                .text("")
                .fontSize(40)
                .color("#c01c28")
        ),
        ramCurrent(
            UI.bar(5.5, 0, 6.5, 0.5, 8309)
                .fontSize(18)
                .max(160)
                .showValue(true)
        ),
        ramMin(
            UI.bar(5.5, 0.5, 6.5, 0.5, 45513)
                .color("#ffbe6f")
                .fontSize(18)
                .max(160)
                .showValue(true)
        ),
        enableAprilTag(
            UI.checkbox(0, 17, 4, 1, 32117)
                .color("#33d17a")
                .text("AprilTag detection")
        ),
        enableFrameSync(
            UI.checkbox(8, 17, 4, 1, 5527)
                .color("#e66100")
                .text("Sync camera to AprilTags")
        )
    {
    }

public:
    void commit();

    Camera& Camera1;
    Text& tagsCnt;
    Text& tagCoords;
    Text& tagId;
    Bar& ramCurrent;
    Bar& ramMin;
    Checkbox& enableAprilTag;
    Checkbox& enableFrameSync;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    void changeTab (uint16_t index) {
        UI.changeTab(index);
    }

    Camera Camera1;
    Text tagsCnt;
    Text tagCoords;
    Text tagId;
    Bar ramCurrent;
    Bar ramMin;
    Checkbox enableAprilTag;
    Checkbox enableFrameSync;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Camera1 = Camera1.finish();
    Layout.tagsCnt = tagsCnt.finish();
    Layout.tagCoords = tagCoords.finish();
    Layout.tagId = tagId.finish();
    Layout.ramCurrent = ramCurrent.finish();
    Layout.ramMin = ramMin.finish();
    Layout.enableAprilTag = enableAprilTag.finish();
    Layout.enableFrameSync = enableFrameSync.finish();
    UI.commit();
}

};

};
