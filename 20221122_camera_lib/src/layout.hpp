// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by http://localhost:3000/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":38765,"type":"Camera","state":{"id":"Camera1","x":0,"y":1,"w":12,"h":7.5,"tab":0,"css":{}}},{"uuid":36725,"type":"Text","state":{"id":"Text1","x":3.5,"y":11,"w":4.5,"h":2,"tab":0,"css":{},"text":"Kamera!","fontSize":28,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Camera1(
            UI.camera(0, 1, 12, 7.5, 38765)
                .clip(true)
        ),
        Text1(
            UI.text(3.5, 11, 4.5, 2, 36725)
                .text("Kamera!")
                .fontSize(28)
        )
    {
    }

public:
    void commit();

    Camera& Camera1;
    Text& Text1;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    void changeTab (uint16_t index) {
        UI.changeTab(index);
    }

    Camera Camera1;
    Text Text1;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Camera1 = Camera1.finish();
    Layout.Text1 = Text1.finish();
    UI.commit();
}

};

};
